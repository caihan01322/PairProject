<!--
<?xml version="1.0" encoding="UTF-8"?>
&lt;!&ndash; 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 &ndash;&gt;
&lt;!&ndash; scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true &ndash;&gt;
&lt;!&ndash; scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 &ndash;&gt;
&lt;!&ndash; debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 &ndash;&gt;
<configuration scan="false" scanPeriod="60 seconds" debug="true">
    &lt;!&ndash;自定义颜色配置 此处converterClass引用的是日志颜色类的路径， 此匹配的是第二种控制台色彩输出方式&ndash;&gt;
    <conversionRule conversionWord="customcolor" converterClass="com.mine.west.util.LogbackColorful"/>

    &lt;!&ndash;定义日志文件的存储地址/根目录： 勿在 LogBack 的配置中使用相对路径&ndash;&gt;
    <property name="LOG_HOME" value="/springboot-west06/log" />

    &lt;!&ndash; 定义日志文件名称 &ndash;&gt;
    <property name="appName" value="springboot-west06"></property>

    &lt;!&ndash; 控制台日志，控制台输出 ch.qos.logback.core.ConsoleAppender &ndash;&gt;
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        &lt;!&ndash;
        日志输出格式：
			%d表示日期时间，
			%thread表示线程名，
			%-5level：级别从左显示5个字符宽度
			%logger{50} 表示logger名字最长50个字符，否则按照句点分割。
			%msg：日志消息，
			%n是换行符
        &ndash;&gt;
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            &lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度,%msg：日志消息，%n是换行符&ndash;&gt;
            <pattern> %red(%d{yyyy-MM-dd HH:mm:ss.SSS}) %green([%thread]) %customcolor(%-5level) %boldMagenta(%logger) - %msg%n</pattern>
            &lt;!&ndash; 如果线上log日志出现中文乱码,下面这句有关编码设置的要删除或注释掉,原因不明&ndash;&gt;
            <charset>UTF-8</charset>
        </encoder>

    </appender>

    &lt;!&ndash; 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 &ndash;&gt;
    &lt;!&ndash;文件日志，按照每天生成日志文件 &ndash;&gt;
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        &lt;!&ndash; 指定日志文件的名称 &ndash;&gt;
        <file>${LOG_HOME}/${appName}.log</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            &lt;!&ndash; 日志文件输出的文件名:
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            &ndash;&gt;
            <FileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</FileNamePattern>
            &lt;!&ndash; 日志文件保留天数:
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            &ndash;&gt;
            <MaxHistory>30</MaxHistory>
            &lt;!&ndash;
            <maxFileSize>50MB</maxFileSize>
            <totalSizeCap>2GB</totalSizeCap>    &ndash;&gt;
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        &lt;!&ndash; 日志输出格式： &ndash;&gt;
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            &lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符&ndash;&gt;
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset> &lt;!&ndash; 设置字符集 &ndash;&gt;
        </encoder>
        &lt;!&ndash;日志文件最大的大小&ndash;&gt;
        &lt;!&ndash;<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>&ndash;&gt;
    </appender>

    &lt;!&ndash;
       <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
       <logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。

       logger主要用于存放日志对象，也可以定义日志类型、级别
       name:用来指定受此logger约束的某一个包或者具体的某一个类。
       level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
            还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
            如果未设置此属性，那么当前logger将会继承上级的级别。
       addtivity:是否向上级logger传递打印信息。默认是true。（作用在于children-logger是否使用 rootLogger配置的appender进行输出）
            false：表示只用当前logger的appender-ref。
            true：表示当前logger的appender-ref和rootLogger的appender-ref都有效。
   &ndash;&gt;
    &lt;!&ndash;<logger name="org.springframework.web" level="info"/>&ndash;&gt;
    &lt;!&ndash;<logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>&ndash;&gt;
    &lt;!&ndash;
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
     &ndash;&gt;

    &lt;!&ndash; show parameters for hibernate sql 专为 Hibernate 定制 &ndash;&gt;
    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE" />
    <logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="DEBUG" />
    <logger name="org.hibernate.SQL" level="DEBUG" />
    <logger name="org.hibernate.engine.QueryParameters" level="DEBUG" />
    <logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" />

    &lt;!&ndash;myibatis log configure&ndash;&gt;
    <logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>

    &lt;!&ndash;开发环境:打印控制台&ndash;&gt;
    <springProfile name="dev">
        <logger name="com.mine.west" level="debug"/>
    </springProfile>

    &lt;!&ndash; 日志输出级别 &ndash;&gt;
    <root level="info">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE"/>
    </root>

</configuration>
-->
